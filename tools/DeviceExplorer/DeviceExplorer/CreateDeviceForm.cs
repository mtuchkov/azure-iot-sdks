using Microsoft.Azure.Devices;
using Microsoft.Azure.Devices.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.ServiceBus;

namespace DeviceExplorer
{
    public partial class CreateDeviceForm : Form
    {
        private string iotHubConnectionString;
        private int devicesMaxCount;
        private RegistryManager registryManager;
        private bool generateDeviceID;
        private bool generateDeviceKeys;

        public CreateDeviceForm(string iotHubConnectionString, int devicesMaxCount)
        {
            InitializeComponent();

            this.iotHubConnectionString = iotHubConnectionString;
            this.registryManager = RegistryManager.CreateFromConnectionString(iotHubConnectionString);
            this.devicesMaxCount = devicesMaxCount;
            
            generateIDCheckBox.Checked = false;
            generateDeviceID = false;

            generateKeysCheckBox.Checked = true;
            generateDeviceKeys = true;
            autoGenerateDeviceKeys();
        }

        private void autoGenerateDeviceKeys()
        {
            primaryKeyTextBox.Text = CryptoKeyGenerator.GenerateKey(32);
            secondaryKeyTextBox.Text = CryptoKeyGenerator.GenerateKey(32);
        }

        private void autoGenerateDeviceID()
        {
            deviceIDTextBox.Text = "device" + Guid.NewGuid().ToString("N");
        }
        private async void createButton_Click(object sender, EventArgs e)
        {
            try
            {
                await RegisterDevicesAsync();
                
                this.Close();
            }
            catch (Exception ex)
            {
                using (new CenterDialog(this))
                {
                    MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private async Task RegisterDevicesAsync()
        {
            for (int j = 0; j < 10; j++)
            {
                try
                {
                    var devices = await registryManager.GetDevicesAsync(1100);
                    var ids = new List<int>();
                    for (int k = 0; k < 1000; k++)
                    {
                        ids.Add(k);
                    }
                    foreach (var d in devices)
                    {
                        if (d.Id.StartsWith("mydevice_"))
                        {
                            var id = int.Parse(d.Id.Substring("mydevice_".Length));
                            ids.Remove(id);
                            if (d.Authentication.SymmetricKey.PrimaryKey != "sHxvBAjxU0ydNh9dZwjf3W5l6MBItKQvDCTAQVYuJh4=")
                            {
                                d.Authentication.SymmetricKey.PrimaryKey = "sHxvBAjxU0ydNh9dZwjf3W5l6MBItKQvDCTAQVYuJh4=";
                                d.Authentication.SymmetricKey.SecondaryKey = "sHxvBAjxU0ydNh9dZwjf3W5l6MBItKQvDCTAQVYuJh4=";
                                await registryManager.UpdateDeviceAsync(d);
                            }
                        }
                    }
                    foreach (var id in ids)
                    {
                        var device = new Device("mydevice_" + id);
                        device = await registryManager.GetDeviceAsync(device.Id) ??
                                 await this.registryManager.AddDeviceAsync(device);
                        if (device.Authentication.SymmetricKey.PrimaryKey != "sHxvBAjxU0ydNh9dZwjf3W5l6MBItKQvDCTAQVYuJh4=")
                        {
                            device.Authentication.SymmetricKey.PrimaryKey = "sHxvBAjxU0ydNh9dZwjf3W5l6MBItKQvDCTAQVYuJh4=";
                            device.Authentication.SymmetricKey.SecondaryKey = "sHxvBAjxU0ydNh9dZwjf3W5l6MBItKQvDCTAQVYuJh4=";
                            await registryManager.UpdateDeviceAsync(device);
                        }
                    }
                }
                catch
                {
                    continue;
                }
            }
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void generateIDCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (generateDeviceID == true) // was checked prior to the click
            {
                generateDeviceID = false;
                deviceIDTextBox.ResetText();
            }
            else  // was NOT checked prior to the click
            {
                generateDeviceID = true;
                autoGenerateDeviceID();
            }

        }

        private void generateKeysCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if(generateDeviceKeys == true) // was checked prior to the click
            {
                generateDeviceKeys = false;
                primaryKeyTextBox.ResetText();
                secondaryKeyTextBox.ResetText();
            }
            else  // was NOT checked prior to the click
            {
                generateDeviceKeys = true;
                autoGenerateDeviceKeys();
            }
        }
    }
}
